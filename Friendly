using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.AI;
using Random = System.Random;

public class Friendly : MonoBehaviour
{
    [SerializeField] private Animator _animator;
    [SerializeField] private NavMeshAgent _navMeshAgent;

    [SerializeField] private float attackRadius = 1f;
    [SerializeField] private float timeBtwAttacks = 1f;
    [SerializeField] private int attackDamage = 20;

    [SerializeField] private int maxHealth;

    [HideInInspector] public bool amIDead;
    
    private bool enemyFound, alreadyAttacked;
    private Transform enemy;
    private int currentHealth;
    private Vector3 enemyPosition;

    private void Awake()
    {
        _animator = GetComponent<Animator>();
        _navMeshAgent = GetComponent<NavMeshAgent>();
        enemyFound = false;
        alreadyAttacked = false;
        amIDead = false;
        currentHealth = maxHealth;
    }

    private void Update()
    {
        if (!enemyFound)
        {
            Invoke(nameof(SearchForEnemy),.8f);
        }
        else
        {
            SearchForEnemy();
            Attack();
        }

        
    }

    void SearchForEnemy()
    {
        if (!enemyFound)
        {
            GameObject[] Enemies = GameObject.FindGameObjectsWithTag("Enemy");
            Random random = new Random();
            int randomInt = random.Next(Enemies.Length);
            enemy = Enemies[randomInt].transform;
            enemyPosition = enemy.position;
            enemyFound = true;
        }
        _navMeshAgent.SetDestination(enemyPosition);
        transform.rotation = Quaternion.Lerp(transform.rotation, Quaternion.LookRotation(enemyPosition), Time.deltaTime);
        _animator.SetBool("Crawl", true);
    }

    void Attack()
    {
        float distance = Vector3.Distance(transform.position, enemy.position);
        if (distance < attackRadius && enemyFound)
        {
            _navMeshAgent.SetDestination(transform.position);
            _animator.SetBool("Crawl", false);
            if (!alreadyAttacked)
            {
                alreadyAttacked = true;
                Invoke(nameof(ResetAttack), timeBtwAttacks);
                _animator.SetTrigger("BiteAttack");
                enemy.GetComponent<Enemy>().TakeDamage(attackDamage);
                if (enemy.GetComponent<Enemy>().amIDead)
                {
                    enemyFound = false;
                }
            }
        }
        
    }

    void ResetAttack()
    {
        alreadyAttacked = false;
    }

    public void TakeDamage(int damage)
    {
    
        currentHealth -= damage;
        _animator.SetTrigger("Hurt");
        if (currentHealth <= 0)
        {
            Dead();
        }
    }

    void Dead()
    {
        amIDead = true;
        tag = "Dead";
        _animator.SetTrigger("Dead");
        GetComponent<Rigidbody>().isKinematic = true;
        GetComponent<Friendly>().enabled = false;
    }
    
}


